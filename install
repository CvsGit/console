#!/usr/bin/php -q
<?php

createMap(__DIR__ . '/system', 'classmap');
saveClassMapApplication(getMap('classmap'), 'classmap');

$sDiretorioAplicacoes = __DIR__ . '/application/'; 
$aArquivosIgnorar = array('.', '..');
$oDiretorioAplicacoes = opendir($sDiretorioAplicacoes);
$aAplicacoes = array();

while ( $sDiretorio = readdir($oDiretorioAplicacoes) ) {

  if ( in_array($sDiretorio, $aArquivosIgnorar) ) {
    continue;
  }

  $aAplicacoes[] = $sDiretorio;
}

if ( empty($aAplicacoes) ) {
  die("Nenhum aplicação encontrada.");
}

foreach( $aAplicacoes as $sAplicacao ) {

  createBootstrap($sAplicacao);
  createAutoComplete($sAplicacao);

  exec('sudo rm /usr/local/bin/' . $sAplicacao . ' 2> /tmp/console_install');
  exec('sudo ln -s ' . __DIR__ . '/bin/' . $sAplicacao . ' /usr/local/bin/ 2> /tmp/consle_install');
  exec('sudo mv -f ' . __DIR__ . '/system/cache/' . $sAplicacao . '_autocomplete /etc/bash_completion.d/ 2> /tmp/console_instal');
}

function saveClassMapApplication($aMap, $sAplicacao) {

  $sClassMap = '<?php' . PHP_EOL . 'return Array(' . PHP_EOL; 

  foreach ( $aMap as $sClass => $sCaminho ) {

    $sDiretorio = realpath($sCaminho);
    $sClassMap .= "  '$sClass' => '$sDiretorio'," . PHP_EOL;
  }

  $sClassMap .= ');' . PHP_EOL;

  return file_put_contents(__DIR__ . '/system/cache/' . $sAplicacao . '.php', $sClassMap);
}

function createMap($sDiretorio, $sArquivoMapa) {

  $sComando  = __DIR__ . '/system/bin/zftool classmap generate -w ' . $sDiretorio.  ' '; 
  $sComando .= __DIR__ . '/system/cache/' . $sArquivoMapa . '.php';
  exec ( $sComando, $aRetorno, $iStatus);
  return $iStatus === 0 ? true : false;
}

function getMap($sArquivoMapa) {
  return require __DIR__ . '/system/cache/' . $sArquivoMapa . '.php';
}

function definirExecucao($sArquivo) {

  exec('sudo chmod +x ' . $sArquivo, $aRetorno, $iStatus);
  return $iStatus;
}

function createBootstrap($sAplicacao) {

  $sBootstrap  = '#!/usr/bin/env php ' . PHP_EOL;                         
  $sBootstrap .= '<?php' . PHP_EOL;                         
  $sBootstrap .= 'require_once dirname(__DIR__) . "/application/' . $sAplicacao . '/bootstrap.php";    ' . PHP_EOL;

  $sArquivoBootstrap = __DIR__ . '/bin/'. $sAplicacao;
  $lArquivoBootstrap = file_put_contents($sArquivoBootstrap, $sBootstrap);

  if ( !$lArquivoBootstrap || !file_exists($sArquivoBootstrap) ) {
    die("Erro ao criar arquivo bootstratp para aplicação: $sAplicacao\n");
  }

  definirExecucao($sArquivoBootstrap);
  return true;
}

function createAutoComplete($sAplicacao) {

  $sAutoComplete  = '#!bash                                                            ' . PHP_EOL;
  $sAutoComplete .= '_console_' . $sAplicacao . '()                                    ' . PHP_EOL;
  $sAutoComplete .= '{                                                                 ' . PHP_EOL;
  $sAutoComplete .= '    local cur prev opts cmd                                       ' . PHP_EOL;
  $sAutoComplete .= '    COMPREPLY=()                                                  ' . PHP_EOL;
  $sAutoComplete .= '    cur="${COMP_WORDS[COMP_CWORD]}"                               ' . PHP_EOL;
  $sAutoComplete .= '    prev="${COMP_WORDS[COMP_CWORD-1]}"                            ' . PHP_EOL;
  $sAutoComplete .= '    cmd="${COMP_WORDS[0]}"                                        ' . PHP_EOL;
  $sAutoComplete .= '                                                                  ' . PHP_EOL;
  $sAutoComplete .= '    #                                                             ' . PHP_EOL;
  $sAutoComplete .= '    # caso for informado 2 comandos, ignora autocomplete          ' . PHP_EOL;
  $sAutoComplete .= '    #                                                             ' . PHP_EOL;
  $sAutoComplete .= '    if [[ "${COMP_CWORD}" == 2 ]]; then                           ' . PHP_EOL;
  $sAutoComplete .= '      return 0;                                                   ' . PHP_EOL;
  $sAutoComplete .= '    fi                                                            ' . PHP_EOL;
  $sAutoComplete .= '                                                                  ' . PHP_EOL;
  $sAutoComplete .= '    PHP=\'$ret = shell_exec($argv[1]);                            ' . PHP_EOL;
  $sAutoComplete .= '                                                                  ' . PHP_EOL;
  $sAutoComplete .= '$ret = preg_replace("/^.*Comandos:\n/s", "", $ret);     ' . PHP_EOL;
  $sAutoComplete .= '$ret = explode("\n", $ret);                                       ' . PHP_EOL;
  $sAutoComplete .= '                                                                  ' . PHP_EOL;
  $sAutoComplete .= '$comps = array();                                                 ' . PHP_EOL;
  $sAutoComplete .= 'foreach ($ret as $line) {                                         ' . PHP_EOL;
  $sAutoComplete .= '    if (preg_match("@^  ([^ ]+) @", $line, $m)) {                 ' . PHP_EOL;
  $sAutoComplete .= '        $comps[] = $m[1];                                         ' . PHP_EOL;
  $sAutoComplete .= '    }                                                             ' . PHP_EOL;
  $sAutoComplete .= '}                                                                 ' . PHP_EOL;
  $sAutoComplete .= '                                                                  ' . PHP_EOL;
  $sAutoComplete .= 'echo implode("\n", $comps);                                       ' . PHP_EOL;
  $sAutoComplete .= '\'                                                                ' . PHP_EOL;
  $sAutoComplete .= '    possible=$($(which php) -r "$PHP" $COMP_WORDS);               ' . PHP_EOL;
  $sAutoComplete .= '    COMPREPLY=( $(compgen -W "${possible}" -- ${cur}) )           ' . PHP_EOL;
  $sAutoComplete .= '    return 0                                                      ' . PHP_EOL;
  $sAutoComplete .= '}                                                                 ' . PHP_EOL;
  $sAutoComplete .= 'complete -F _console_' . $sAplicacao . ' -o default ' . $sAplicacao . PHP_EOL;
  $sAutoComplete .= 'COMP_WORDBREAKS=${COMP_WORDBREAKS//:}                             ' . PHP_EOL;

  $sArquivoAutoComplete = __DIR__ .'/system/cache/' . $sAplicacao . '_autocomplete';
  $lArquivoAutoComplete = file_put_contents($sArquivoAutoComplete, $sAutoComplete);

  if ( !$lArquivoAutoComplete || !file_exists($sArquivoAutoComplete) ) {
    die("Erro ao criar arquivo autocomplete para aplicação: $sAplicacao\n");
  }

  definirExecucao($sArquivoAutoComplete);

  return true;
}

